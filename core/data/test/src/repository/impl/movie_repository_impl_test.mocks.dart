// Mocks generated by Mockito 5.4.4 from annotations
// in core_data/test/src/repository/impl/movie_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:core_model/models.dart' as _i3;
import 'package:core_network/src/remote/api/movie_api.dart' as _i4;
import 'package:core_network/src/remote/response/movie_response.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieResponse_0 extends _i1.SmartFake implements _i2.MovieResponse {
  _FakeMovieResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieImage_1 extends _i1.SmartFake implements _i3.MovieImage {
  _FakeMovieImage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieInfo_2 extends _i1.SmartFake implements _i3.MovieInfo {
  _FakeMovieInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieApi extends _i1.Mock implements _i4.MovieApi {
  MockMovieApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.MovieResponse> fetchMovies(
    String? type,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMovies,
          [
            type,
            key,
          ],
        ),
        returnValue: _i5.Future<_i2.MovieResponse>.value(_FakeMovieResponse_0(
          this,
          Invocation.method(
            #fetchMovies,
            [
              type,
              key,
            ],
          ),
        )),
      ) as _i5.Future<_i2.MovieResponse>);

  @override
  _i5.Future<_i3.MovieImage> getMovieImages(
    int? movieId,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieImages,
          [
            movieId,
            key,
          ],
        ),
        returnValue: _i5.Future<_i3.MovieImage>.value(_FakeMovieImage_1(
          this,
          Invocation.method(
            #getMovieImages,
            [
              movieId,
              key,
            ],
          ),
        )),
      ) as _i5.Future<_i3.MovieImage>);

  @override
  _i5.Future<_i3.MovieInfo> getMovieInfo(
    int? movieId,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieInfo,
          [
            movieId,
            key,
          ],
        ),
        returnValue: _i5.Future<_i3.MovieInfo>.value(_FakeMovieInfo_2(
          this,
          Invocation.method(
            #getMovieInfo,
            [
              movieId,
              key,
            ],
          ),
        )),
      ) as _i5.Future<_i3.MovieInfo>);
}
