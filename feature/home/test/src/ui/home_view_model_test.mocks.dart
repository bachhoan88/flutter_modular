// Mocks generated by Mockito 5.4.4 from annotations
// in feature_home/test/src/ui/home_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:core_data/src/repository/movie_repository.dart' as _i3;
import 'package:core_model/models.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieInfo_0 extends _i1.SmartFake implements _i2.MovieInfo {
  _FakeMovieInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieImage_1 extends _i1.SmartFake implements _i2.MovieImage {
  _FakeMovieImage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Movie>> fetchMovies(String? type) => (super.noSuchMethod(
        Invocation.method(
          #fetchMovies,
          [type],
        ),
        returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
      ) as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<_i2.MovieInfo> getMovieInfo(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #getMovieInfo,
          [movieId],
        ),
        returnValue: _i4.Future<_i2.MovieInfo>.value(_FakeMovieInfo_0(
          this,
          Invocation.method(
            #getMovieInfo,
            [movieId],
          ),
        )),
      ) as _i4.Future<_i2.MovieInfo>);

  @override
  _i4.Future<_i2.MovieImage> getMovieImages(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieImages,
          [movieId],
        ),
        returnValue: _i4.Future<_i2.MovieImage>.value(_FakeMovieImage_1(
          this,
          Invocation.method(
            #getMovieImages,
            [movieId],
          ),
        )),
      ) as _i4.Future<_i2.MovieImage>);
}
